// ignore: dangling_library_doc_comments
/// This file has been copied from the https://github.com/forus-labs/cauldron project.
///
/// Windows does not use the IANA time zone database, but instead
/// uses its own database of time zones.
///
/// This file contains the mappings from Windows time zone IDs to
/// IANA time zone IDs so that the IANA time zone database can be
/// used on Windows.

import 'dart:convert';

import 'dart:io';

import 'package:http/http.dart';

const source =
    'https://raw.githubusercontent.com/unicode-org/cldr-json/main/cldr-json/cldr-core/supplemental/windowsZones.json';
const output = 'test/utils/windows_tz_mappings.g.dart';

const header = '''
import 'package:meta/meta.dart';

// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/generate_windows_zones.dart
// **************************************************************************

// ignore_for_file: type=lint

/// The mappings for Windows Zone IDs (Standard names) to TZ database names. These mappings are mechanically derived from
/// the [CLDR-JSON](https://github.com/unicode-org/cldr-json/blob/main/cldr-json/cldr-core/supplemental/windowsZones.json) repository.
@internal 
const windowsToAina = {
''';

// ignore_for_file: avoid_dynamic_calls

void main() async {
  final response = await get(Uri.parse(source));

  final raw = jsonDecode(response.body)['supplemental']['windowsZones']
      ['mapTimezones'] as List<dynamic>;

  final zones = <String, Set<String>>{};
  for (final object in raw) {
    final zone = object['mapZone'];
    final windows = zone['_other'] as String;
    final location = zone['_type'] as String;

    zones[windows] ??= {};
    zones[windows]!.addAll(location.split(" "));
  }

  final buffer = StringBuffer(header);
  for (final entry in zones.entries) {
    buffer.writeln(
        "  '${entry.key}': { ${entry.value.map((e) => "'$e'").join(', ')} },");
  }
  buffer.writeln('};');
  buffer.writeln("""
late final Map<String, Set<String>> ianaToWindows = () {
  final ianaToWindows = <String, Set<String>>{};
  for (final entry in windowsToAina.entries) {
    for (final iana in entry.value) {
      ianaToWindows.putIfAbsent(iana, () => <String>{}).add(entry.key);
    }
  }
  return ianaToWindows;
}();
""");

  File(output).writeAsStringSync(buffer.toString());
}
